# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Pickup variables
-include Makefile.common
ARDUINO_MK := $(shell find ./build -name '*arduino.mk' | tail -n 1)
-include $(ARDUINO_MK)

INCLUDE_DIRS += ./tools/esp8266/tools/sdk/include/
INCLUDE_DIRS += ./tools/esp8266/cores/esp8266/
INCLUDE_DIRS += ./tools/esp8266/variants/nodemcu/
INCLUDE_DIRS += ./tools/esp8266/libraries/ESP8266WiFi/src/

CPP_INCLUDES := $(foreach dir,$(INCLUDE_DIRS) $(USER_INC_DIRS),-I$(dir))

THIS_FILE := $(lastword $(MAKEFILE_LIST))

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = test/googletest/googletest/

# Where to find test code.
TEST_DIR = ./test

# Where to find the application code.
APP_SRC_DIR = ./src
APP_INC_DIR = ./include

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
#CXXFLAGS += -g -Wall -Wextra -pthread $(CPP_INCLUDES) -I$(APP_INC_DIR)
CXXFLAGS += -g -Wall -Wextra $(CPP_INCLUDES) -I$(APP_INC_DIR)

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = metrictemp

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all-tests : $(TESTS)

clean-tests :
	rm -f $(TESTS) gtest.a gtest_main.a *.o

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	$(CPP_COM) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest-all.cc

gtest_main.o : $(GTEST_SRCS_)
	$(CPP_COM) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
             $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	"$(ESP_ROOT)/tools/xtensa-lx106-elf/bin/xtensa-lx106-elf-ar" cru $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

#$(BUILD_ROOT)/TempSensorMain_generic/MetricTemp.cpp.o :
#	@$(MAKE) -f Makefile all

metrictemp_unittest.o : $(TEST_DIR)/metrictemp_unittest.cpp \
                        $(GTEST_HEADERS)
#	$(CPP_COM) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/metrictemp_unittest.cpp
	$(CPP_COM) $(CPPFLAGS) $(CXXFLAGS) -c $(TEST_DIR)/metrictemp_unittest.cpp

metrictemp : metrictemp_unittest.o gtest_main.a
#	$(CPP_COM) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
	$(AR_COM) $^
	$(LD_COM) $(LD_EXTRA) metrictemp_unittest.o gtest_main.a
